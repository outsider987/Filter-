// Generated by https://quicktype.io

namespace  demo1.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class All
    {
        [JsonProperty("help")]
        public string Help { get; set; }

        [JsonProperty("success")]
        public bool Success { get; set; }

        [JsonProperty("result")]
        public Result Result { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("resource_id")]
        public string ResourceId { get; set; }

        [JsonProperty("fields")]
        public Field[] Fields { get; set; }

        [JsonProperty("records")]
        public Record[] Records { get; set; }

        [JsonProperty("_links")]
        public Links Links { get; set; }

        [JsonProperty("total")]
        public long Total { get; set; }
    }

    public partial class Field
    {
        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class Links
    {
        [JsonProperty("start")]
        public string Start { get; set; }

        [JsonProperty("next")]
        public string Next { get; set; }
    }

    public partial class Record
    {
        [JsonProperty("Ticketinfo")]
        public Ticketinfo Ticketinfo { get; set; }

        [JsonProperty("Zone")]
        public string Zone { get; set; }

        [JsonProperty("Px")]
        public string Px { get; set; }

        [JsonProperty("Py")]
        public string Py { get; set; }

        [JsonProperty("Add")]
        public string Add { get; set; }

        [JsonProperty("Gov")]
        public Gov Gov { get; set; }

        [JsonProperty("Class2")]
        [JsonConverter(typeof(ParseIntegerConverter))]
        public long? Class2 { get; set; }

        [JsonProperty("Class1")]
        [JsonConverter(typeof(ParseIntegerConverter))]
        public long Class1 { get; set; }

        [JsonProperty("Website")]
        public string Website { get; set; }

        [JsonProperty("Opentime")]
        public string Opentime { get; set; }

        [JsonProperty("Description")]
        public string Description { get; set; }

        [JsonProperty("Remarks")]
        public string Remarks { get; set; }

        [JsonProperty("Parkinginfo_py")]
        public string ParkinginfoPy { get; set; }

        [JsonProperty("Parkinginfo_px")]
        public string ParkinginfoPx { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Level")]
        [JsonConverter(typeof(ParseIntegerConverter))]
        public long? Level { get; set; }

        [JsonProperty("Picture1")]
        public string Picture1 { get; set; }

        [JsonProperty("Toldescribe")]
        public string Toldescribe { get; set; }

        [JsonProperty("Changetime")]
        public DateTimeOffset Changetime { get; set; }

        [JsonProperty("Tel")]
        public string Tel { get; set; }

        [JsonProperty("Picdescribe1")]
        public string Picdescribe1 { get; set; }

        [JsonProperty("Travellinginfo")]
        public string Travellinginfo { get; set; }

        [JsonProperty("_id")]
        public long RecordId { get; set; }

        [JsonProperty("Id")]
        public string Id { get; set; }
    }

    public enum TypeEnum { Int4, Numeric, Text, Timestamp };

    public enum Gov { The397000000A };

    public enum Ticketinfo { DiY手做教學200元人提供用餐服務150人, Empty, 免費參觀, 新台幣50元 };

    public partial class All
    {
        public static All FromJson(string json) => JsonConvert.DeserializeObject<All>(json,  demo1.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this All self) => JsonConvert.SerializeObject(self,  demo1.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                TypeEnumConverter.Singleton,
                GovConverter.Singleton,
                TicketinfoConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "int4":
                    return TypeEnum.Int4;
                case "numeric":
                    return TypeEnum.Numeric;
                case "text":
                    return TypeEnum.Text;
                case "timestamp":
                    return TypeEnum.Timestamp;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Int4:
                    serializer.Serialize(writer, "int4");
                    return;
                case TypeEnum.Numeric:
                    serializer.Serialize(writer, "numeric");
                    return;
                case TypeEnum.Text:
                    serializer.Serialize(writer, "text");
                    return;
                case TypeEnum.Timestamp:
                    serializer.Serialize(writer, "timestamp");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class ParseIntegerConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseIntegerConverter Singleton = new ParseIntegerConverter();
    }

    internal class GovConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Gov) || t == typeof(Gov?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "397000000A")
            {
                return Gov.The397000000A;
            }
            throw new Exception("Cannot unmarshal type Gov");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Gov)untypedValue;
            if (value == Gov.The397000000A)
            {
                serializer.Serialize(writer, "397000000A");
                return;
            }
            throw new Exception("Cannot marshal type Gov");
        }

        public static readonly GovConverter Singleton = new GovConverter();
    }

    internal class TicketinfoConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Ticketinfo) || t == typeof(Ticketinfo?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Ticketinfo.Empty;
                case "DIY手做教學 200元/人提供用餐服務 150/人":
                    return Ticketinfo.DiY手做教學200元人提供用餐服務150人;
                case "免費參觀":
                    return Ticketinfo.免費參觀;
                case "新台幣50元":
                    return Ticketinfo.新台幣50元;
            }
            throw new Exception("Cannot unmarshal type Ticketinfo");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Ticketinfo)untypedValue;
            switch (value)
            {
                case Ticketinfo.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Ticketinfo.DiY手做教學200元人提供用餐服務150人:
                    serializer.Serialize(writer, "DIY手做教學 200元/人提供用餐服務 150/人");
                    return;
                case Ticketinfo.免費參觀:
                    serializer.Serialize(writer, "免費參觀");
                    return;
                case Ticketinfo.新台幣50元:
                    serializer.Serialize(writer, "新台幣50元");
                    return;
            }
            throw new Exception("Cannot marshal type Ticketinfo");
        }

        public static readonly TicketinfoConverter Singleton = new TicketinfoConverter();
    }
}
